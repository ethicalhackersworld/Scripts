\\ Save this script as filename.vbe - It will list computername, username, os

Set objNetwork = CreateObject("WScript.Network")
Set objShell = CreateObject("WScript.Shell")
Set objOS = GetObject("winmgmts:root\cimv2:Win32_OperatingSystem=@")

strComputerName = objNetwork.ComputerName
strUserName = objNetwork.UserName
strOSVersion = objOS.Version

WScript.Echo "Computer Name: " & strComputerName
WScript.Echo "User Name: " & strUserName
WScript.Echo "OS Version: " & strOSVersion

\\Save this script as domain_computers.vbe - it will display the names, operating systems, and OS versions of all computers in the domain. 

' Save this script as domain_computers.vbe
Set objRootDSE = GetObject("LDAP://RootDSE")
strDomain = objRootDSE.Get("defaultNamingContext")

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.CommandText = "<LDAP://" & strDomain & ">;(objectCategory=computer);name,operatingSystem,operatingSystemVersion;subtree"
Set objRecordSet = objCommand.Execute

Dim output
output = "Computers in domain: " & strDomain & vbCrLf & vbCrLf
Do Until objRecordSet.EOF
    output = output & "Computer Name: " & objRecordSet.Fields("name").Value & vbCrLf
    On Error Resume Next
    output = output & "Operating System: " & objRecordSet.Fields("operatingSystem").Value & vbCrLf
    output = output & "OS Version: " & objRecordSet.Fields("operatingSystemVersion").Value & vbCrLf
    On Error GoTo 0
    output = output & "-------------------------" & vbCrLf
    objRecordSet.MoveNext
Loop

objConnection.Close

' Save output to a text file
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.CreateTextFile("domain_computers.txt", True)
objFile.Write output
objFile.Close

WScript.Echo "Computer information has been saved to domain_computers.txt"



\\ fetch pcs using cmd without amdin pivs

# Import the Active Directory module (if not already imported)
Import-Module ActiveDirectory

# Query Active Directory for all computer objects in the domain
$computers = Get-ADComputer -Filter *

# Output the list of computers
foreach ($computer in $computers) {
    Write-Output $computer.Name
}


\\Task 


<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <RegistrationInfo>
    <Date>2024-07-10T12:00:00.000</Date>
    <Author>USERNAME</Author>
    <URI>\MyTask</URI>
  </RegistrationInfo>
  <Triggers>
    <BootTrigger>
      <Enabled>true</Enabled>
    </BootTrigger>
  </Triggers>
  <Principals>
    <Principal id="Author">
      <UserId>USERNAME</UserId>
      <LogonType>InteractiveToken</LogonType>
      <RunLevel>LeastPrivilege</RunLevel>
    </Principal>
  </Principals>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>false</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
    <IdleSettings>
      <StopOnIdleEnd>true</StopOnIdleEnd>
      <RestartOnIdle>false</RestartOnIdle>
    </IdleSettings>
    <AllowStartOnDemand>true</AllowStartOnDemand>
    <Enabled>true</Enabled>
    <Hidden>false</Hidden>
    <RunOnlyIfIdle>false</RunOnlyIfIdle>
    <WakeToRun>false</WakeToRun>
    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>
    <Priority>7</Priority>
  </Settings>
  <Actions Context="Author">
    <Exec>
      <Command>C:\Users\user1\Downloads\dcm.exe</Command>
    </Exec>
  </Actions>
</Task>


